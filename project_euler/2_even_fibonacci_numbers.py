"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

# Brute Force
# def even_fibonacci_sum(n):
#     fn_2 = 1 #Fn-2
#     fn_1 = 1 #Fn-1
#     sum = 0
#     while True :
#         fn = fn_2 + fn_1 #Fn
#         if fn >= n: return sum
#         if fn % 2 == 0: sum += fn
#         fn_2, fn_1 = fn_1, fn
#
#
# even_fibonacci_sum(4000000)

# Improved Brute Force

# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233
# odd, odd, even, odd, odd, even, odd, odd, even...

# Fn-3 and Fn-6 are even

"""
Fn = Fn-1 + Fn-2
   = (Fn-2 + Fn-3) + (Fn-3 + Fn-4)
   = 2Fn-3 + Fn-2 + Fn-4
   = 2Fn-3 + (Fn-3 + Fn-4) + (Fn-5 + Fn-6)
   = 3Fn-3 + Fn-4 + Fn-5 + Fn-6
   = 3Fn-3 + Fn-3 + Fn-6
   = 4fn-3 + Fn-6
"""

def even_fibonacci_sum(n):
    fn_2 = 2 #Fn-2
    fn_1 = 8 #Fn-1
    sum = 10 #first even number Fn-2 + Fn-1
    while True :
        fn = 4 * fn_1 + fn_2
        if fn >= n: return sum
        sum += fn
        fn_2, fn_1 = fn_1, fn

print(even_fibonacci_sum(4000000))


